[

  {
    "bID": 93,
    "bsubmitter": "fffff",
    "btitle": "测试博文/问题记录",
    "bcategory": "技术博文/问题",
    "bcontent": "<h2>Model&nbsp;验证总结 </h2><p><a href=\"https://www.cnblogs.com/starksoft/p/5616889.html\" target=\"_blank\">https://www.cnblogs.com/starksoft/p/5616889.html</a></p><p><br></p><p><br></p><p><br></p><p>Model&nbsp;验证总结&nbsp;1</p><p>一．Model&nbsp;验证标记&nbsp;1</p><p>1、启用客户端验证： 1</p><p>2、在&nbsp;Model&nbsp;中加入验证标记&nbsp;2</p><p>3&nbsp;、&nbsp;Model&nbsp;类中可以添加的验证标记：&nbsp;3</p><p>3.1、必填字段 3</p><p>3.2&nbsp;、&nbsp;字段长度 3</p><p>3.3&nbsp;、&nbsp;正则验证 3</p><p>3.4、范围 4</p><p>3.5、服务端参与的验证 4</p><p>3.6、比较 4</p><p>3.7、自定义错误消息 5</p><p>4、后台&nbsp;Action&nbsp;的写法&nbsp;6</p><p>5&nbsp;、&nbsp;最后附上常用正则表达式（网上找的） 7</p><p>二、&nbsp;Model&nbsp;验证标记实例：&nbsp;9</p><p>1&nbsp;、&nbsp;&nbsp;实例一： 9</p><p>2&nbsp;、实例二：&nbsp;10</p><p>附录： 13</p><h2>一．Model&nbsp;验证标记</h2><h2>1、启用客户端验证：</h2><p>客户端验证主要是为了提高用户体验，在网页不回刷的情况下完成验证。</p><p>第一步是要在web.config里启用客户端验证，这在MVC3自带的模板项目中已经有了：</p><p>&lt;addkey=\"ClientValidationEnabled\"value=\"true\"/&gt;</p><p>&lt;addkey=\"UnobtrusiveJavaScriptEnabled\"value=\"true\"/&gt;</p><p>然后在被验证的View页面上要加入这样两个JavaScript，注意，他们是依赖于JQuery的：</p><p>&lt;scriptsrc=\"@Url.Content(\"~/Scripts/jquery.validate.min.js\")\"type=\"text/javascript\"&gt;&lt;/script&gt;</p><p>&lt;scriptsrc=\"@Url.Content(\"~/Scripts/jquery.validate.unobtrusive.min.js\")\"type=\"text/javascript\"&gt;&lt;/script&gt;</p><p>验证消息的显示有两种，一种是ValidationSummary，它可以显示一份验证消息的汇总，包括从后台Action里返回的消息。</p><p>@Html.ValidationSummary(true,\"Login&nbsp;was&nbsp;unsuccessful.&nbsp;Please&nbsp;correct&nbsp;the&nbsp;errors&nbsp;and&nbsp;try&nbsp;again.\")</p><p>另一种是Model中各属性对应HTML控件的验证消息：</p><p>@Html.ValidationMessageFor(m&nbsp;=&gt;&nbsp;m.UserName)</p><h2>2、在&nbsp;Model&nbsp;中加入验证标记</h2><p>MVC3项目模板自带的登录模型类如下：</p><p><span style=\"background-color: rgb(245, 245, 245); color: rgb(0, 0, 0);\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></span></p><pre class=\"ql-syntax\" spellcheck=\"false\">publicclassLogOnModel\n{\n\n    [Required]\n\n    [Display(Name =\"User name\")]\n\n    publicstringUserName {get;set; }\n\n    [Required]\n\n    [DataType(DataType.Password)]\n\n    [Display(Name =\"Password\")]\n\n    publicstringPassword {get;set; }\n\n    [Display(Name =\"Remember me?\")]\n\n    publicboolRememberMe {get;set; }\n\n}\n</pre><p><span style=\"background-color: rgb(245, 245, 245); color: rgb(0, 0, 0);\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></span></p><p><br></p><p>对比普通的C#类，我们发现每个属性上都多了被方括号“[]”包围的标记。其中，[Required]是验证标记的一种，而[Display]、[DataType]则是为了显示对应的HTML控件，这不在本文讨论范围之内。</p><p>除了Required，我们还可以在Model中添加其他有用的验证标记。下面是个较完整的列表：</p><h2>3&nbsp;、&nbsp;Model&nbsp;类中可以添加的验证标记：</h2><h3>3.1、必填字段</h3><p>[Required]</p><p>public&nbsp;string&nbsp;FirstName&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}</p><h3>3.2&nbsp;、&nbsp;字段长度</h3><p>至多n位：</p><p>[StringLength(160)]</p><p>public&nbsp;string&nbsp;FirstName&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}</p><p>要求至少n位：</p><p>[StringLength(160,&nbsp;MinimumLength=3)]</p><p>public&nbsp;string&nbsp;FirstName&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}</p><h3>3.3&nbsp;、&nbsp;正则验证</h3><p>[RegularExpression(@”[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}”)]</p><p>public&nbsp;string&nbsp;Email&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}</p><h3>3.4、范围</h3><p>[Range(35,44)]</p><p>public&nbsp;int&nbsp;Age&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}</p><p>小数的情况：</p><p>[Range(typeof(decimal),&nbsp;“0.00”,&nbsp;“49.99”)]</p><p>public&nbsp;decimal&nbsp;Price&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}</p><h3>3.5、服务端参与的验证</h3><p>[Remote(“CheckUserName”,&nbsp;“Account”)]</p><p>public&nbsp;string&nbsp;UserName&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}</p><p>然后在AccountController里指定一个CheckUserName方法：</p><pre class=\"ql-syntax\" spellcheck=\"false\">publicJsonResult CheckUserName(stringusername)\n{\n    var result = Membership.FindUsersByName(username).Count == 0;\n    returnJson(result, JsonRequestBehavior.AllowGet);\n}\n</pre><h3>[RegularExpression(@”[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}”)]3.6、比较</h3><p>public&nbsp;string&nbsp;Email&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}</p><p>[Compare(“Email”)]</p><p>public&nbsp;string&nbsp;EmailConfirm&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}</p><h3>3.7、自定义错误消息</h3><p>正则：</p><p>[RegularExpression(@”[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}”,&nbsp;ErrorMessage=”Email&nbsp;doesn’t&nbsp;look&nbsp;like&nbsp;a&nbsp;valid&nbsp;email&nbsp;address.”)]</p><p>public&nbsp;string&nbsp;Email&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}</p><p>普通文本：</p><p>[Required(ErrorMessage=”Your&nbsp;last&nbsp;name&nbsp;is&nbsp;required”)]</p><p>[StringLength(160,&nbsp;ErrorMessage=”Your&nbsp;last&nbsp;name&nbsp;is&nbsp;too&nbsp;long”)]</p><p>public&nbsp;string&nbsp;LastName&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}</p><p>占位符：</p><p>[Required(ErrorMessage=”Your&nbsp;{0}&nbsp;is&nbsp;required.”)]</p><p>[StringLength(160,&nbsp;ErrorMessage=”{0}&nbsp;is&nbsp;too&nbsp;long.”)]</p><p>public&nbsp;string&nbsp;LastName&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}</p><h2>4、后台&nbsp;Action&nbsp;的写法</h2><p>Action里要做的有两件事：判断ModelState是否合法、添加错误消息。MVC3模板自带的登录Action如下：</p><p><span style=\"background-color: rgb(245, 245, 245); color: rgb(0, 0, 0);\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></span></p><pre class=\"ql-syntax\" spellcheck=\"false\">[HttpPost]\n\npublicActionResult LogOn(LogOnModel model,stringreturnUrl)\n{\n    if(ModelState.IsValid)\n    {\n        if(Membership.ValidateUser(model.UserName, model.Password))\n        {\n            FormsAuthentication.SetAuthCookie(model.UserName, model.RememberMe);\n            if(Url.IsLocalUrl(returnUrl) &amp;&amp; returnUrl.Length &gt; 1 &amp;&amp; returnUrl.StartsWith(\"/\")\n                &amp;&amp; !returnUrl.StartsWith(\"//\") &amp;&amp; !returnUrl.StartsWith(\"/\\\\\"))\n            {\n                returnRedirect(returnUrl);\n            }\n            else\n            {\n                returnRedirectToAction(\"Index\",\"Home\");\n            }\n        }\n        else\n        {\n            ModelState.AddModelError(\"\",\"The user name or password provided is incorrect.\");\n        }\n    }\n\n    // If we got this far, something failed, redisplay form\n    returnView(model);\n}\n</pre><p><span style=\"background-color: rgb(245, 245, 245); color: rgb(0, 0, 0);\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></span></p><p>&nbsp;</p><p>if&nbsp;(ModelState.IsValid)&nbsp;是重点，如果不出意外，即客户端浏览器没有关闭JavaScript，并且客户不是个黑客（黑客可能会通过一些工具模拟POST），那只要通过正常途径&nbsp;POST到这个Action的Model都应该是IsValid的。当然，编程的一个重要原则是不能相信用户的输入，所以我们有必要再判断一次&nbsp;ModelState.IsValid。[HttpPost]表示这个Action只能通过POST动作调用，这是为了配合View里的表单，因为FORM的ACTION是POST（当然也可以是GET），不过这不在本文的讨论范围内。</p><p>ModelState.AddModelError方法是给View返回一个错误消息，最终交给@Html.ValidationSummary显示。</p><h2>5&nbsp;、&nbsp;最后附上常用正则表达式（网上找的）</h2><p>数字：\"^[0-9]*$\"。</p><p>n位的数字：\"^\\d{n}$\"。</p><p>至少n位的数字：\"^\\d{n,}$\"。</p><p>m~n位的数字：。\"^\\d{m,n}$\"</p><p>零和非零开头的数字：\"^(0|[1-9][0-9]*)$\"。</p><p>有两位小数的正实数：\"^[0-9]+(.[0-9]{2})?$\"。</p><p>有1~3位小数的正实数：\"^[0-9]+(.[0-9]{1,3})?$\"。</p><p>非零的正整数：\"^\\+?[1-9][0-9]*$\"。</p><p>非零的负整数：\"^\\-[1-9][]0-9\"*$。</p><p>长度为3的字符：\"^.{3}$\"。</p><p>由26个英文字母组成的字符串：\"^[A-Za-z]+$\"。</p><p>由26个大写英文字母组成的字符串：\"^[A-Z]+$\"。</p><p>由26个小写英文字母组成的字符串：\"^[a-z]+$\"。</p><p>由数字和26个英文字母组成的字符串：\"^[A-Za-z0-9]+$\"。</p><p>由数字、26个英文字母或者下划线组成的字符串：\"^\\w+$\"。</p><p>验证用户密码：\"^[a-zA-Z]\\w{5,17}$\"正确格式为：以字母开头，长度在6~18之间，只能包含字符、数字和下划线。</p><p>验证是否含有^%&amp;’,;=?$\\\"等字符：\"[^%&amp;’,;=?$\\x22]+\"。</p><p>只能输入汉字：\"^[\\u4e00-\\u9fa5]{0,}$\"</p><p>验证Email地址：\"^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$\"。</p><p>验证InternetURL：\"^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&amp;=]*)?$\"。</p><p>验证电话号码：\"^(\\(\\d{3,4}-)|\\d{3.4}-)?\\d{7,8}$\"正确格式为：\"XXX-XXXXXXX\"、\"XXXX-&nbsp;XXXXXXXX\"、\"XXX-XXXXXXX\"、\"XXX-XXXXXXXX\"、\"XXXXXXX\"和\"XXXXXXXX\"。</p><p>验证身份证号(15位或18位数字)：\"^\\d{15}|\\d{18}$\"。</p><p>验证一年的12个月：\"^(0?[1-9]|1[0-2])$\"正确格式为：\"01\"～\"09\"和\"1\"～\"12\"。</p><p>验证一个月的31天：\"^((0?[1-9])|((1|2)[0-9])|30|31)$\"正确格式为;\"01\"～\"09\"和\"1\"～\"31\"。</p><h2>二、Model&nbsp;验证标记实例：</h2><h2>1、实例一：</h2><p>&nbsp;&nbsp;&nbsp;</p><p><span style=\"background-color: rgb(245, 245, 245); color: rgb(0, 0, 0);\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></span></p><pre class=\"ql-syntax\" spellcheck=\"false\">public partial class UserDto     {\n\n        public long ID { get; set; }\n\n        [Display(Name=\"角色编号\")]        \n        public long RoleID { get; set; }\n\n        [Display(Name=\"角色\")]\n        public string RoleName { get; set; }\n\n        [StringLength(30)]\n        [Required(ErrorMessage=\"登录名不能为空\")]\n        [Display(Name = \"登录名\")]\n        [System.Web.Mvc.Remote(\"CheckUserName\", \"User\",\"Admin\", ErrorMessage = \"用户名已存在，请重新填写\")]\n        public string LoginID { get; set; }\n\n        [Display(Name = \"电话号码\")]\n        [RegularExpression(RegexHelper.Phone,ErrorMessage = \"电话格式有误,示例：023-12345678;(023)1234567-1234\")]       \n        public string Mobile { get; set; }\n\n        [RegularExpression(RegexHelper.Email, ErrorMessage = \"请输入正确的Email格式：abc@123.com\")]\n        [Display(Name = \"邮箱\")]\n        [StringLength(30)]\n        public string Email { get; set; }\n\n        [Display(Name = \"密码\")]\n        [Required(ErrorMessage=\"请输入密码\")]  \n        [DataType(DataType.Password)]\n        [StringLength(16,MinimumLength=6)]\n        public string Password { get; set; }\n\n        [DataType(DataType.Password)]\n        [Display(Name = \"确认密码\")]\n        [System.ComponentModel.DataAnnotations.Compare(\"Password\")]\n        public string PasaswordConfirm { get; set; }\n\n        [StringLength(80)]     \n        public string PasswordHash { get; set; }\n\n        [StringLength(10)]\n        [Display(Name = \"密码盐\")]\n        public string PasswordSalt { get; set; }\n\n        [StringLength(80)]\n        [Display(Name = \"用户名\")]\n        public string UserName { get; set; }\n\n        [StringLength(2)]\n        [Display(Name = \"性别\")]\n        public string Gender { get; set; }\n\n        [Display(Name = \"出生日期\")]\n        [DataType(DataType.Date)]\n        public DateTime? Birthday { get; set; }\n\n        [Display(Name = \"操作\")]\n        public string Operation { get; set; }\n\n    }\n\n}\n</pre><p><span style=\"background-color: rgb(245, 245, 245); color: rgb(0, 0, 0);\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></span></p><p>2&nbsp;、实例二：</p><p><span style=\"background-color: rgb(245, 245, 245); color: rgb(0, 0, 0);\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></span></p><pre class=\"ql-syntax\" spellcheck=\"false\">namespace MvcApplication4.Models\n\n{\n\n    public class UserInfo\n\n    {        //ID编号\n\n        [ScaffoldColumn(false)]\n        [Required(AllowEmptyStrings = false, ErrorMessage = \"用户ID不能为空\")]\n        [Display(Name = \"记录编号\", Order = 20000)]\n        public int ID { get; set; }\n\n        [Display(Order = 15000)]\n        [Required(AllowEmptyStrings = false, ErrorMessage = \"用户名不能为空\")]\n        [StringLength(20, MinimumLength = 6, ErrorMessage = \"用户名不能大于{2} 且要小于{1}\")]\n        [Remote(\"User\", \"Validate\", HttpMethod = \"post\", ErrorMessage = \"用户名已经存在\")]\n        public string UserName { get; set; }        \n\n        [Display(Name=\"password\")]\n        [DataType(DataType.Password)]\n        [Required(AllowEmptyStrings = false, ErrorMessage = \"密码不能为空\")]\n        [StringLength(60, MinimumLength = 20, ErrorMessage = \"密码必须在{2} 和{1}之间\")]\n        public string UserPassword { get; set; }\n\n        [Required(AllowEmptyStrings = false, ErrorMessage = \"邮箱必填\")]\n        [RegularExpression(@\"[A-Za-z0-9._%+-]+@[A-Za-z0-9]+\\.[A-Za-z]{2,4}\", ErrorMessage = \"{0}的格式不正确\")]\n        public string Email { get; set; }\n\n        [Compare(\"Email\", ErrorMessage = \"邮箱要相同\")]\n        public string TEmail { get; set; }  //compare 大小写要相同 否则不会触发 验证\n\n        [Display(Name = \"身份证号码\")]\n        [RegularExpression(@\"\\d{17}[\\d|x]|\\d{15}\", ErrorMessage = \"身份证号码格式错误\")]\n        public string IdentityNo { get; set; }\n\n        [Required(AllowEmptyStrings = false, ErrorMessage = \"年龄必填\")]\n        [Range(10, 100, ErrorMessage = \"年龄不能大于{2} 不能小于{1}\")]\n        public int Age { get; set; }\n\n        [ReadOnly(true)]\n        [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = \"{0:c}\")]\n        [Required(ErrorMessage = \"金额不能为空\")]\n        [Range(typeof(decimal), \"20.0\", \"30.0\", ErrorMessage = \"金额在{1}和{2}之间\")]\n        public decimal Money { get; set; }\n\n    }\n\n}\n</pre><p><span style=\"background-color: rgb(245, 245, 245); color: rgb(0, 0, 0);\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></span></p>",
    "btraffic": 298,
    "bcommentNum": 0,
    "bUpdateTime": "\/Date(1546272000000+0800)\/",
    "bCreateTime": "\/Date(1546272000000+0800)\/",
    "bRemark": null,
    "IsDeleted": "0"
  }
]
